[main]
# Conection Data Base
dataSource=org.postgresql.ds.PGSimpleDataSource
dataSource.url=jdbc:postgresql://localhost:5432/Proca3si
dataSource.user=operationConnection
dataSource.password=@dmin.20!5
# Encryption
credentialsMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName=MD5
# credentialsMatcher.hashSalted = true
# credentialsMatcher.hashIterations = 1024
#credentialsMatcher.storedCredentialsHexEncoded=false
# Authentication
jdbcRealm=co.edu.proca3si.ejb.business.util.security.PostgresDataSource
jdbcRealm.dataSource=$dataSource
jdbcRealm.credentialsMatcher=$credentialsMatcher
#jdbcRealm.permissionsLookupEnabled=true
#jdbcRealm.saltStyle=COLUMN
jdbcRealm.authenticationQuery=SELECT ump.ump_passwordhash FROM usuario usu INNER JOIN user_membership ump on usu.ump_codigo = ump.ump_codigo where usu.usu_usuario = ?
#jdbcRealm.userRolesQuery = "SELECT role_name FROM user_roles WHERE user_name = ?"
# Permissions
#jdbcRealm.permissionsQuery = "SELECT permission FROM roles_permissions WHERE role_name = ?"
#SecurityManager
#securityManager = org.apache.shiro.mgt.SessionsSecurityManager
# securityManager.sessionManager = $sessionManager
#securityManager.sessionManager.globalSessionTimeout = 900000
# securityManager.sessionMode = native
securityManager.realms=$jdbcRealm

# Permissions2
# myPermissionResolver = org.xujin.shiro.permission.MyPermissionResolver
# securityManager.authorizer.permissionResolver = $myPermissionResolver
# myRolePermissionResolver = org.xujin.shiro.permission.MyRolePermissionResolver
# securityManager.authorizer.rolePermissionResolver = $myRolePermissionResolver
# staticRealm=org.xujin.shiro.realm.StaticRealm
# securityManager.realms=$staticRealm

#authcStrategy = org.apache.shiro.authc.pam.AllSuccessfulStrategy
#securityManager.authenticator.authenticationStrategy=$authcStrategy

# authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
# authc.loginUrl = /login/

# [urls]
# /login/ = authc 